@use "sass:map";

// Property to Class Map
$classNameMap: (
  color: c,
  background-color: bg,
  border-color: b,
  border-left-color: bl,
  border-right-color: br,
  border-top-color: bt,
  border-bottom-color: bb,
);

@function get($props, $key) {
  @return map.get($props, $key);
}

@function selectors($name) {
  @return (
    ".#{$name}",
    "[class~='#{$name}:'] > *",
    "[class~='#{$name}:fl']::first-letter",
    // Actions
    "[class~='#{$name}:hover']:hover",
    "[class~='#{$name}:focus']:focus",
    "[class~='#{$name}:active']:active",
    // Order
    "[class~='#{$name}:oc']:only-child",
    "[class~='#{$name}:even']:nth-child(even)",
    "[class~='#{$name}:odd']:nth-child(odd)",
    "[class~='#{$name}:fc']:first-child",
    "[class~='#{$name}:lc']:last-child",
    "[class~='#{$name}:lft']:last-of-type",
    // Not
    "[class~='#{$name}:not:oc']:not(:only-child)",
    "[class~='#{$name}:not:fc']:not(:first-child)",
    "[class~='#{$name}:not:lc']:not(:last-child)",
    "[class~='#{$name}:not:lft']:not(:last-of-type)",
    // Child
    // Child Actions
    "[class~='#{$name}::hover'] > *:hover",
    "[class~='#{$name}::focus'] > *:focus",
    "[class~='#{$name}::active'] > *:active",
    // Child Position
    "[class~='#{$name}::fl'] > *::first-letter",
    "[class~='#{$name}::even'] > *:nth-child(even)",
    "[class~='#{$name}::odd'] > *:nth-child(odd)",
    "[class~='#{$name}::oc'] > *:only-child",
    "[class~='#{$name}::fc'] > *:first-child",
    "[class~='#{$name}::lc'] > *:last-child",
    "[class~='#{$name}::lft'] > *:last-of-type",
    // Child Position Acitons
    // Hover
    "[class~='#{$name}::oc:hover'] > *:only-child:hover",
    "[class~='#{$name}::fc:hover'] > *:first-child:hover",
    "[class~='#{$name}::lc:hover'] > *:last-child:hover",
    "[class~='#{$name}::lft:hover'] > *:last-of-type:hover",
    // Focus
    "[class~='#{$name}::oc:focus'] > *:only-child:focus",
    "[class~='#{$name}::fc:focus'] > *:first-child:focus",
    "[class~='#{$name}::lc:focus'] > *:last-child:focus",
    "[class~='#{$name}::lft:focus'] > *:last-of-type:focus",
    // Active
    "[class~='#{$name}::oc:active'] > *:only-child:active",
    "[class~='#{$name}::fc:active'] > *:first-child:active",
    "[class~='#{$name}::lc:active'] > *:last-child:active",
    "[class~='#{$name}::lft:active'] > *:last-of-type:active",
    // Not child
    "[class~='#{$name}:not::oc'] > *:not(:only-child)",
    "[class~='#{$name}:not::fc'] > *:not(:first-child)",
    "[class~='#{$name}:not::lc'] > *:not(:last-child)",
    "[class~='#{$name}:not::lft'] > *:not(:last-of-type)",
    // Child Position Acitons
    // Hover
    "[class~='#{$name}:not::oc:hover'] > *:not(:only-child):hover",
    "[class~='#{$name}:not::fc:hover'] > *:not(:first-child):hover",
    "[class~='#{$name}:not::lc:hover'] > *:not(:last-child):hover",
    "[class~='#{$name}:not::lft:hover'] > *:not(:last-of-type):hover",
    // Focus
    "[class~='#{$name}:not::oc:focus'] > *:not(:only-child):focus",
    "[class~='#{$name}:not::fc:focus'] > *:not(:first-child):focus",
    "[class~='#{$name}:not::lc:focus'] > *:not(:last-child):focus",
    "[class~='#{$name}:not::lft:focus'] > *:not(:last-of-type):focus",
    // Active
    "[class~='#{$name}:not::oc:active'] > *:not(:only-child):active",
    "[class~='#{$name}:not::fc:active'] > *:not(:first-child):active",
    "[class~='#{$name}:not::lc:active'] > *:not(:last-child):active",
    "[class~='#{$name}:not::lft:active'] > *:not(:last-of-type):active"
  );
}

@function props($className, $property, $value, $suffix: "") {
  $name: "#{$className}-#{$value}#{$suffix}";
  @return (
    className: $className,
    property: $property,
    value: $value,
    selectors: selectors($name)
  );
}

// @mixin createRules($property, $value, $suffix: "") {
//   $props: props(get($classNameMap, $property), $property, $value, $suffix);

//   $selectors: get($props, "selectors");

//   .some {
//     color: list.nth($selectors, 1);
//   }
//   // #{}-x {
//   //   #{get($props ,"property")}: #{get($props, "value")};
//   // }

//   #{$selectors} {
//     #{get($props ,"property")}: #{get($props, "value")};
//   }
// }
